{"version":3,"sources":["components/Editable/Editable.js","components/TaskRow/TaskRow.js","components/TaskTable/TaskTable.js","App.js","serviceWorker.js","index.js"],"names":["Editable","react_default","a","createElement","style","width","type","name","this","props","cellData","id","value","onChange","onTaskTableUpdate","Component","TaskRow","onDelEvent","task","className","components_Editable_Editable","description","duedate","status","onClick","bind","TaskTable","rowDel","onRowDel","filterText","tasks","map","indexOf","components_TaskRow_TaskRow","key","onRowAdd","backgroundColor","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","event","Math","floor","random","toString","push","evt","item","target","newTasks","slice","index","splice","components_TaskTable_TaskTable","handleTaskTable","handleAddEvent","handleRowDel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.020b05de.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Editable extends Component {\r\n\r\n    render() {\r\n        const styling = {\r\n            width: '200px'\r\n            \r\n        }\r\n       \r\n      return (\r\n        <td>\r\n          <input style={styling} type='text' name={this.props.cellData.type} id={this.props.cellData.id} value={this.props.cellData.value} onChange={this.props.onTaskTableUpdate}/>\r\n        </td>\r\n      );\r\n  \r\n    }\r\n  \r\n  }\r\n\r\n  export default Editable;","import React, { Component } from 'react';\r\nimport Editable from '../Editable/Editable';\r\nimport './TaskRow.css';\r\n\r\nclass TaskRow extends Component{\r\n    onDelEvent(){\r\n        this.props.onDelEvent(this.props.task);\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <tr className='TaskRow'>\r\n                <Editable onTaskTableUpdate = {this.props.onTaskTableUpdate} cellData={{\r\n                    type: 'task',\r\n                    value: this.props.task.task,\r\n                    id: this.props.task.id\r\n                }} />\r\n                <Editable onTaskTableUpdate = {this.props.onTaskTableUpdate} cellData={{\r\n                    type: 'description',\r\n                    value: this.props.task.description,\r\n                    id: this.props.task.id\r\n                }} />\r\n                <Editable onTaskTableUpdate = {this.props.onTaskTableUpdate} cellData={{\r\n                    type: 'duedate',\r\n                    value: this.props.task.duedate,\r\n                    id: this.props.task.id\r\n                }} />\r\n                <Editable onTaskTableUpdate = {this.props.onTaskTableUpdate} cellData={{\r\n                    type: 'status',\r\n                    value: this.props.task.status,\r\n                    id: this.props.task.id\r\n                }} />\r\n\r\n                <td>\r\n                    <input type = 'button' onClick = {this.onDelEvent.bind(this)} value = 'x' />\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskRow;","import React, { Component } from 'react';\r\nimport TaskRow from '../TaskRow/TaskRow';\r\nimport '../TaskRow/TaskRow.css';\r\n\r\nclass TaskTable extends Component{\r\n    render(){\r\n        const styling = {\r\n            backgroundColor: '#dddde907'\r\n\r\n        }\r\n\r\n        var onTaskTableUpdate =this.props.onTaskTableUpdate;\r\n        var rowDel =this.props.onRowDel;\r\n        var filterText = this.props.filterText;\r\n        var task = this.props.tasks.map(function(task){\r\n            if(task.task.indexOf(filterText) === -1){\r\n                return;\r\n            }\r\n            return(\r\n                <TaskRow onTaskTableUpdate = {onTaskTableUpdate} task = {task} onDelEvent={rowDel.bind(this)} key = {task.id} />\r\n            )\r\n        });\r\n\r\n        return(\r\n            <div>\r\n              <button type='button' onClick = {this.props.onRowAdd} style={styling}>New Task</button>\r\n              <table>\r\n                  <thead>\r\n                      <tr>\r\n                        <th>Task</th>\r\n                        <th>Description</th>\r\n                        <th>Due Date</th>\r\n                        <th>Status</th>\r\n                      </tr>\r\n                  </thead>\r\n\r\n                  <tbody>\r\n                      {task}\r\n                  </tbody>\r\n              </table>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskTable;","import React, { Component } from 'react';\nimport './App.css';\n//import './components/TaskRow/TaskRow.css';\nimport TaskTable from './components/TaskTable/TaskTable';\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n\n    this.state = {};\n    this.state.filterText = \"\";\n    this.state.tasks =[\n      {\n        id: 1,\n        task: 'Complete Assignment',\n        description: 'According to given problem state, develop a mini-todo app using reactjs',\n        duedate: '2/19/2019',\n        status: 'Complete'\n      }\n    ];\n\n  }\n\n  handleUserInput(filterText) {\n    this.setState({filterText: filterText});\n  };\n\n  handleAddEvent(event){\n    var id = (Math.floor(Math.random()*999)).toString(20);\n    var task = {\n      id: id,\n      task: \"\",\n      description: \"\",\n      duedate: \"\",\n      status: \"\"\n    }\n    this.state.tasks.push(task);\n    this.setState(this.state.tasks);\n  }\n\n  handleTaskTable(evt){\n    var item = {\n      id: evt.target.id,\n      name: evt.target.name,\n      value: evt.target.value\n    }\n\n    var tasks = this.state.tasks.slice();\n    var newTasks = tasks.map(function(task){\n      for(var key in task){\n        if(key == item.name && task.id == item.id){\n          task[key] = item.value;\n        }\n      }\n      return task;\n    });\n    this.setState({tasks:newTasks});\n\n  }\n\n  handleRowDel(task){\n    var index = this.state.tasks.indexOf(task);\n    this.state.tasks.splice(index,1);\n    this.setState(this.state.tasks);\n  }\n\n\n\n  render() {\n    return (\n      <div><center>\n        <h2 className='awesome'>My TODO APP</h2>\n        <TaskTable onTaskTableUpdate = {this.handleTaskTable.bind(this)}\n        onRowAdd = {this.handleAddEvent.bind(this)}\n        onRowDel = {this.handleRowDel.bind(this)}\n        tasks = {this.state.tasks}\n        filterText = {this.state.filterText} />\n        </center>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}